/*
Задача:
В этом ката мы собираемся имитировать синтаксис SQL с помощью JavaScript.

Для этого необходимо реализовать функцию query (). Эта функция возвращает объект и использует следующие методы:

{
  select: ...,
  from: ...,
  where: ...,
  orderBy: ...,
  groupBy: ...,
  having: ...,
  execute: ...
}

Методы являются цепочечными, и запрос выполняется путем вызова метода execute ().

SELECT * FROM numbers
var numbers = [1, 2, 3];
query().select().from(numbers).execute(); //[1, 2, 3]

// порядок статей не имеет значения
query().from(numbers).select().execute(); //[1, 2, 3]

Конечно, вы можете делать запросы к коллекциям объектов:

var persons = [
  {name: 'Peter', profession: 'teacher', age: 20, maritalStatus: 'married'},
  {name: 'Michael', profession: 'teacher', age: 50, maritalStatus: 'single'},
  {name: 'Peter', profession: 'teacher', age: 20, maritalStatus: 'married'},
  {name: 'Anna', profession: 'scientific', age: 20, maritalStatus: 'married'},
  {name: 'Rose', profession: 'scientific', age: 50, maritalStatus: 'married'},
  {name: 'Anna', profession: 'scientific', age: 20, maritalStatus: 'single'},
  {name: 'Anna', profession: 'politician', age: 50, maritalStatus: 'married'}
];

//SELECT * FROM persons
query().select().from(persons).execute(); // [{name: 'Peter',...}, {name: 'Michael', ...}]

Вы можете выбрать несколько полей:

function profession(person) {
  return person.profession;
}

//SELECT profession FROM persons
query().select(profession).from(persons).execute(); //select receives a function that will be called with the values of the array //["teacher","teacher","teacher","scientific","scientific","scientific","politician"]

Если вы повторите предложение SQL (за исключением случаев, когда () или наличие ()), будет выдано исключение

query().select().select().execute(); //Error('Duplicate SELECT');
query().select().from([]).select().execute(); //Error('Duplicate SELECT');
query().select().from([]).from([]).execute(); //Error('Duplicate FROM');
query().select().from([]).where([]).where([]) //This is an AND filter (см. ниже)

Вы можете опустить любое предложение SQL:

var numbers = [1, 2, 3];

query().select().execute(); //[]
query().from(numbers).execute(); // [1, 2, 3]
query().execute(); // []

Вы можете применить фильтры:

function isTeacher(person) {
  return person.profession === 'teacher';
}

//SELECT profession FROM persons WHERE profession="teacher" 
query().select(profession).from(persons).where(isTeacher).execute(); //["teacher", "teacher", "teacher"]

//SELECT * FROM persons WHERE profession="teacher" 
query().select().from(persons).where(isTeacher).execute(); //[{person: 'Peter', profession: 'teacher', ...}, ...]

function name(person) {
  return person.name;
}

//SELECT name FROM persons WHERE profession="teacher" 
query().select(name).from(persons).where(isTeacher).execute();//["Peter", "Michael", "Peter"]

Агрупации также возможны:

//SELECT * FROM persons GROUP BY profession <- Bad in SQL but possible in this kata
query().select().from(persons).groupBy(profession).execute(); 
[
  ["teacher",
     [
       {
        name: "Peter",
        profession: "teacher"
        ...
      },
      {
        name: "Michael",
        profession: "teacher"
        ...
      }
    ]
  ],
  ["scientific",
    [
       {
          name: "Anna",
          profession: "scientific"
        },
     ...
   ]
  ]
  ...
]

Вы можете смешать where() с groupBy():

//SELECT * FROM persons WHERE profession='teacher' GROUP BY profession
query().select().from(persons).where(isTeacher).groupBy(profession).execute();

Или с select():

function professionGroup(group) {
  return group[0];
}

//SELECT profession FROM persons GROUP BY profession
query().select(professionGroup).from(persons).groupBy(profession).execute(); //["teacher","scientific","politician"]

Другие примеры:

function isEven(number) {
  return number % 2 === 0;
}

function parity(number) {
  return isEven(number) ? 'even' : 'odd';
}

var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]; 

//SELECT * FROM numbers
query().select().from(numbers).execute(); //[1, 2, 3, 4, 5, 6, 7, 8, 9]

//SELECT * FROM numbers GROUP BY parity
query().select().from(numbers).groupBy(parity).execute(); //[["odd",[1,3,5,7,9]],["even",[2,4,6,8]]]

Многоуровневая группировка:

function isPrime(number) {
  if (number < 2) {
    return false;
  }
  var divisor = 2;
  for(; number % divisor !== 0; divisor++);
  return divisor === number;
}

function prime(number) {
  return isPrime(number) ? 'prime' : 'divisible';
}

//SELECT * FROM numbers GROUP BY parity, isPrime
query().select().from(numbers).groupBy(parity, prime).execute(); // [["odd",[["divisible",[1,9]],["prime",[3,5,7]]]],["even",[["prime",[2]],["divisible",[4,6,8]]]]]

orderBy должен вызываться после groupBy, поэтому значения, передаваемые функции orderBy, являются сгруппированными результатами с помощью функции groupBy.

Фильтровать группы с having():

function odd(group) {
  return group[0] === 'odd';
}

//SELECT * FROM numbers GROUP BY parity HAVING odd(number) = true <- I know, this is not a valid SQL statement, but you can understand what I am doing
query().select().from(numbers).groupBy(parity).having(odd).execute(); //[["odd",[1,3,5,7,9]]]

Вы можете заказать результаты:

var numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];

function descendentCompare(number1, number2) {
  return number2 - number1;
}

//SELECT * FROM numbers ORDER BY value DESC 
 query().select().from(numbers).orderBy(descendentCompare).execute(); //[9,8,7,6,5,4,3,2,1]

 from () поддерживает несколько коллекций:

 var teachers = [
  {
    teacherId: '1',
    teacherName: 'Peter'
  },
  {
    teacherId: '2',
    teacherName: 'Anna'
  }
];


var students = [
  {
    studentName: 'Michael',
    tutor: '1'
  },
  {
    studentName: 'Rose',
    tutor: '2'
  }
];

function teacherJoin(join) {
  return join[0].teacherId === join[1].tutor;
}

function student(join) {
  return {studentName: join[1].studentName, teacherName: join[0].teacherName};
}

//SELECT studentName, teacherName FROM teachers, students WHERE teachers.teacherId = students.tutor
query().select(student).from(teachers, students).where(teacherJoin).execute(); //[{"studentName":"Michael","teacherName":"Peter"},{"studentName":"Rose","teacherName":"Anna"}]

Наконец, where() и having() допускают несколько фильтров И и ИЛИ:

function tutor1(join) {
  return join[1].tutor === "1";
}

//SELECT studentName, teacherName FROM teachers, students WHERE teachers.teacherId = students.tutor AND tutor = 1 
query().select(student).from(teachers, students).where(teacherJoin).where(tutor1).execute(); //[{"studentName":"Michael","teacherName":"Peter"}] <- AND filter

var numbers = [1, 2, 3, 4, 5, 7];

function lessThan3(number) {
  return number < 3;
}

function greaterThan4(number) {
  return number > 4;
}

//SELECT * FROM number WHERE number < 3 OR number > 4
query().select().from(numbers).where(lessThan3, greaterThan4).execute(); //[1, 2, 5, 7] <- OR filter

var numbers = [1, 2, 1, 3, 5, 6, 1, 2, 5, 6];

function greatThan1(group) {
  return group[1].length > 1;
}

function isPair(group) {
  return group[0] % 2 === 0;
}

function id(value) {
  return value;
}

function frequency(group) {
  return { value: group[0], frequency: group[1].length };      
}

//SELECT number, count(number) FROM numbers GROUP BY number HAVING count(number) > 1 AND isPair(number)
query().select(frequency).from(numbers).groupBy(id).having(greatThan1).having(isPair).execute(); // [{"value":2,"frequency":2},{"value":6,"frequency":2}])
*/

let query = function () {
  this.data = [];
  this.call_select = false;
  this.call_from = false;
  this.call_orderBy = false;
  this.call_groupBy = false;
  this.call_execute = false;
  this.selectfun = null;
  this.orderfun = null;
  this.wherefun = [];
  this.wherefun2 = [];
  this.groupfun = [];
  this.havingfun = [];
  this.throw = null;
  if (!(this instanceof query)) return new query();
};

query.prototype.select = function () {
  if (this.call_select) this.throw = "SELECT";
  this.call_select = true;
  this.selectfun = arguments[0];
  return this;
};

query.prototype.from = function () {
  if (this.call_from) this.throw = "FROM";
  this.call_from = true;
  if (arguments.length > 1) {
    for (let i in arguments[0]) {
      for (let j in arguments[1]) {
        let temp = [];
        temp.push(arguments[0][i]);
        temp.push(arguments[1][j]);
        this.data.push(temp.slice());
      }
    }
  } else this.data = arguments[0];
  return this;
};

query.prototype.where = function () {
  if (this.wherefun.length > 0) this.wherefun2 = arguments;
  else this.wherefun = arguments;
  return this;
};

query.prototype.groupBy = function () {
  if (this.call_groupBy) this.throw = "GROUPBY";
  this.call_groupBy = true;
  this.groupfun = arguments;
  return this;
};

query.prototype.orderBy = function (name) {
  if (this.call_orderBy) this.throw = "ORDERBY";
  this.call_orderBy = true;
  this.orderfun = name;
  return this;
};

query.prototype.having = function () {
  this.havingfun = arguments;
  return this;
};

query.prototype.execute = function () {
  if (this.call_execute) this.throw = "EXECUTE";
  this.call_execute = true;
  if (this.throw) throw new Error("Duplicate " + this.throw);
  if (!this.call_from) return [];
  let res = this.data.slice();
  if (this.wherefun.length > 0) {
    let temp = [];
    for (let j = 0; j < res.length; j++) {
      let flag = false;
      for (let i in this.wherefun) {
        if (this.wherefun[i](res[j])) flag = true;
      }
      if (flag) temp.push(res[j]);
    }
    res = temp.slice();
  }
  if (this.wherefun2.length > 0) {
    let temp = [];
    for (let j = 0; j < res.length; j++) {
      let flag = false;
      for (let i in this.wherefun2) {
        if (this.wherefun2[i](res[j])) flag = true;
      }
      if (flag) temp.push(res[j]);
    }
    res = temp.slice();
  }
  if (this.groupfun.length > 0) {
    let dic = {};
    for (let j = 0; j < res.length; j++) {
      let temp = dic;
      for (let i = 0; i < this.groupfun.length; i++) {
        if (!(this.groupfun[i](res[j]) in temp)) {
          temp[this.groupfun[i](res[j])] =
            i == this.groupfun.length - 1 ? [] : {};
        }
        temp = temp[this.groupfun[i](res[j])];
      }
      temp.push(res[j]);
    }
    res = toarr(dic);
  }
  if (this.selectfun) {
    let newdata = [];
    for (let i = 0; i < res.length; i++) newdata.push(this.selectfun(res[i]));
    res = newdata.slice();
  }
  if (this.orderfun) res.sort(this.orderfun);
  if (this.havingfun.length > 0) {
    let finalres = [];
    for (let i = 0; i < res.length; i++) {
      let inres = true;
      for (let j = 0; j < this.havingfun.length; j++) {
        let temp = [];
        for (let k in res[i]) temp.push(res[i][k]);
        if (!this.havingfun[j](temp)) inres = false;
      }
      if (inres) finalres.push(res[i]);
    }
    res = finalres.slice();
  }
  return res;
};

function toarr(dic) {
  let temp = [];
  for (let k in dic) {
    if (Array.isArray(dic[k])) {
      if (isNumeric(k)) temp.push([parseInt(k), dic[k]]);
      else temp.push([k, dic[k]]);
    } else {
      if (isNumeric(k)) temp.push([parseInt(k), toarr(dic[k])]);
      else temp.push([k, toarr(dic[k])]);
    }
  }
  return temp;
}

function isNumeric(n) {
  return !isNaN(parseFloat(n)) && isFinite(n);
}

let numbers = [1, 2, 3];
console.log(query().select().from(numbers).execute(), numbers); // expected 2
console.log(query().select().execute(), []); // expected "No FROM clause produces empty array"
console.log(query().from(numbers).execute(), numbers); // expected "SELECT can be omited"
console.log(query().execute(), []); // expected 2
console.log(query().from(numbers).select().execute(), numbers); // expected "The order does not matter"

let persons = [
  { name: "Peter", profession: "teacher", age: 20, maritalStatus: "married" },
  { name: "Michael", profession: "teacher", age: 50, maritalStatus: "single" },
  { name: "Peter", profession: "teacher", age: 20, maritalStatus: "married" },
  { name: "Anna", profession: "scientific", age: 20, maritalStatus: "married" },
  { name: "Rose", profession: "scientific", age: 50, maritalStatus: "married" },
  { name: "Anna", profession: "scientific", age: 20, maritalStatus: "single" },
  { name: "Anna", profession: "politician", age: 50, maritalStatus: "married" },
];

console.log(query().select().from(persons).execute()); // expected persons

function profession(person) {
  return person.profession;
}

console.log(query().select(profession).from(persons).execute()); // expected ["teacher","teacher","teacher","scientific","scientific","scientific","politician"]
console.log(query().select(profession).execute()); // expected []

function isTeacher(person) {
  return person.profession === "teacher";
}

//SELECT profession FROM persons WHERE profession="teacher"
console.log(
  query().select(profession).from(persons).where(isTeacher).execute()
); // expected ["teacher", "teacher", "teacher"]
//SELECT * FROM persons WHERE profession="teacher"
console.log(query().from(persons).where(isTeacher).execute()); // expected persons.slice(0, 3)

function name(person) {
  return person.name;
}

//SELECT name FROM persons WHERE profession="teacher"
console.log(query().select(name).from(persons).where(isTeacher).execute()); // expected ["Peter", "Michael", "Peter"]
console.log(query().where(isTeacher).from(persons).select(name).execute()); // expected ["Peter", "Michael", "Peter"]

persons = [
  { name: "Peter", profession: "teacher", age: 20, maritalStatus: "married" },
  { name: "Michael", profession: "teacher", age: 50, maritalStatus: "single" },
  { name: "Peter", profession: "teacher", age: 20, maritalStatus: "married" },
  { name: "Anna", profession: "scientific", age: 20, maritalStatus: "married" },
  { name: "Rose", profession: "scientific", age: 50, maritalStatus: "married" },
  { name: "Anna", profession: "scientific", age: 20, maritalStatus: "single" },
  { name: "Anna", profession: "politician", age: 50, maritalStatus: "married" },
];

function profession(person) {
  return person.profession;
}

//SELECT * FROM persons GROUPBY profession <- Bad in SQL but possible in JavaScript
console.log(query().select().from(persons).groupBy(profession).execute()); // expected [["teacher",[{"name":"Peter","profession":"teacher","age":20,"maritalStatus":"married"},{"name":"Michael","profession":"teacher","age":50,"maritalStatus":"single"},{"name":"Peter","profession":"teacher","age":20,"maritalStatus":"married"}]],["scientific",[{"name":"Anna","profession":"scientific","age":20,"maritalStatus":"married"},{"name":"Rose","profession":"scientific","age":50,"maritalStatus":"married"},{"name":"Anna","profession":"scientific","age":20,"maritalStatus":"single"}]],["politician",[{"name":"Anna","profession":"politician","age":50,"maritalStatus":"married"}]]]);

function isTeacher(person) {
  return person.profession === "teacher";
}

//SELECT * FROM persons WHERE profession='teacher' GROUPBY profession
console.log(
  query().select().from(persons).where(isTeacher).groupBy(profession).execute()
); // expected [["teacher",[{"name":"Peter","profession":"teacher","age":20,"maritalStatus":"married"},{"name":"Michael","profession":"teacher","age":50,"maritalStatus":"single"},{"name":"Peter","profession":"teacher","age":20,"maritalStatus":"married"}]]]);

function professionGroup(group) {
  return group[0];
}

//SELECT profession FROM persons GROUPBY profession
console.log(
  query().select(professionGroup).from(persons).groupBy(profession).execute()
); // expected ["teacher","scientific","politician"])

function name(person) {
  return person.name;
}

//SELECT * FROM persons WHERE profession='teacher' GROUPBY profession, name
console.log(query().select().from(persons).groupBy(profession, name).execute()); // expected  [["teacher",[["Peter",[{"name":"Peter","profession":"teacher","age":20,"maritalStatus":"married"},{"name":"Peter","profession":"teacher","age":20,"maritalStatus":"married"}]],["Michael",[{"name":"Michael","profession":"teacher","age":50,"maritalStatus":"single"}]]]],["scientific",[["Anna",[{"name":"Anna","profession":"scientific","age":20,"maritalStatus":"married"},{"name":"Anna","profession":"scientific","age":20,"maritalStatus":"single"}]],["Rose",[{"name":"Rose","profession":"scientific","age":50,"maritalStatus":"married"}]]]],["politician",[["Anna",[{"name":"Anna","profession":"politician","age":50,"maritalStatus":"married"}]]]]]

function age(person) {
  return person.age;
}

function maritalStatus(person) {
  return person.maritalStatus;
}

//SELECT * FROM persons WHERE profession='teacher' GROUPBY profession, name, age
console.log(
  query()
    .select()
    .from(persons)
    .groupBy(profession, name, age, maritalStatus)
    .execute()
); // expected [["teacher",[["Peter",[[20,[["married",[{"name":"Peter","profession":"teacher","age":20,"maritalStatus":"married"},{"name":"Peter","profession":"teacher","age":20,"maritalStatus":"married"}]]]]]],["Michael",[[50,[["single",[{"name":"Michael","profession":"teacher","age":50,"maritalStatus":"single"}]]]]]]]],["scientific",[["Anna",[[20,[["married",[{"name":"Anna","profession":"scientific","age":20,"maritalStatus":"married"}]],["single",[{"name":"Anna","profession":"scientific","age":20,"maritalStatus":"single"}]]]]]],["Rose",[[50,[["married",[{"name":"Rose","profession":"scientific","age":50,"maritalStatus":"married"}]]]]]]]],["politician",[["Anna",[[50,[["married",[{"name":"Anna","profession":"politician","age":50,"maritalStatus":"married"}]]]]]]]]]

function professionCount(group) {
  return [group[0], group[1].length];
}

//SELECT profession, count(profession) FROM persons GROUPBY profession
console.log(
  query().select(professionCount).from(persons).groupBy(profession).execute()
); // expected [["teacher",3],["scientific",3],["politician",1]]

function naturalCompare(value1, value2) {
  if (value1 < value2) return -1;
  else if (value1 > value2) return 1;
  else return 0;
}

//SELECT profession, count(profession) FROM persons GROUPBY profession ORDER BY profession
console.log(
  query()
    .select(professionCount)
    .from(persons)
    .groupBy(profession)
    .orderBy(naturalCompare)
    .execute()
); // expected [["politician",1],["scientific",3],["teacher",3]]

function isEven(number) {
  return number % 2 === 0;
}

function parity(number) {
  return isEven(number) ? "even" : "odd";
}

function isPrime(number) {
  if (number < 2) return false;
  let divisor = 2;
  for (; number % divisor !== 0; divisor++);
  return divisor === number;
}

function prime(number) {
  return isPrime(number) ? "prime" : "divisible";
}

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];

//SELECT * FROM numbers
console.log(query().select().from(numbers).execute()); // expected numbers

//SELECT * FROM numbers GROUP BY parity
console.log(query().select().from(numbers).groupBy(parity).execute()); // expected [["odd",[1,3,5,7,9]],["even",[2,4,6,8]]]

//SELECT * FROM numbers GROUP BY parity, isPrime
console.log(query().select().from(numbers).groupBy(parity, prime).execute()); // expected [["odd",[["divisible",[1,9]],["prime",[3,5,7]]]],["even",[["prime",[2]],["divisible",[4,6,8]]]]]

function odd(group) {
  return group[0] === "odd";
}

//SELECT * FROM numbers GROUP BY parity HAVING
console.log(
  query().select().from(numbers).groupBy(parity).having(odd).execute()
); // expected [["odd",[1,3,5,7,9]]]

function descendentCompare(number1, number2) {
  return number2 - number1;
}

//SELECT * FROM numbers ORDER BY value DESC
console.log(
  query().select().from(numbers).orderBy(descendentCompare).execute()
); // expected [9,8,7,6,5,4,3,2,1]

function lessThan3(number) {
  return number < 3;
}

function greaterThan4(number) {
  return number > 4;
}

//SELECT * FROM number WHERE number < 3 OR number > 4
console.log(
  query().select().from(numbers).where(lessThan3, greaterThan4).execute()
); // expected  [1,2,5,6,7,8,9]

persons = [
  ["Peter", 3],
  ["Anna", 4],
  ["Peter", 7],
  ["Michael", 10],
];

function nameGrouping(person) {
  return person[0];
}

function sumValues(value) {
  return [
    value[0],
    value[1].reduce(function (result, person) {
      return result + person[1];
    }, 0),
  ];
}

function naturalCompare(value1, value2) {
  if (value1 < value2) return -1;
  else if (value1 > value2) return 1;
  else return 0;
}
//SELECT name, sum(value) FROM persons ORDER BY naturalCompare GROUP BY nameGrouping
console.log(
  query()
    .select(sumValues)
    .from(persons)
    .orderBy(naturalCompare)
    .groupBy(nameGrouping)
    .execute()
); // expected [["Anna",4],["Michael",10],["Peter",10]]);

numbers = [1, 2, 1, 3, 5, 6, 1, 2, 5, 6];

function id(value) {
  return value;
}

function frequency(group) {
  return { value: group[0], frequency: group[1].length };
}

//SELECT number, count(number) FROM numbers GROUP BY number
console.log(query().select(frequency).from(numbers).groupBy(id).execute()); // expected [{"value":1,"frequency":3},{"value":2,"frequency":2},{"value":3,"frequency":1},{"value":5,"frequency":2},{"value":6,"frequency":2}]

function greatThan1(group) {
  return group[1].length > 1;
}

function isPair(group) {
  return group[0] % 2 === 0;
}

//SELECT number, count(number) FROM numbers GROUP BY number HAVING count(number) > 1 AND isPair(number)
console.log(
  query()
    .select(frequency)
    .from(numbers)
    .groupBy(id)
    .having(greatThan1)
    .having(isPair)
    .execute()
); // expected [{"value":2,"frequency":2},{"value":6,"frequency":2}]

let teachers = [
  {
    teacherId: "1",
    teacherName: "Peter",
  },
  {
    teacherId: "2",
    teacherName: "Anna",
  },
];

let students = [
  {
    studentName: "Michael",
    tutor: "1",
  },
  {
    studentName: "Rose",
    tutor: "2",
  },
];

function teacherJoin(join) {
  return join[0].teacherId === join[1].tutor;
}

function student(join) {
  return { studentName: join[1].studentName, teacherName: join[0].teacherName };
}

//SELECT studentName, teacherName FROM teachers, students WHERE teachers.teacherId = students.tutor
console.log(
  query().select(student).from(teachers, students).where(teacherJoin).execute()
); // expected [{"studentName":"Michael","teacherName":"Peter"},{"studentName":"Rose","teacherName":"Anna"}]

let numbers1 = [1, 2];
let numbers2 = [4, 5];

console.log(query().select().from(numbers1, numbers2).execute()); // expected [[1,4],[1,5],[2,4],[2,5]]

function tutor1(join) {
  return join[1].tutor === "1";
}

//SELECT studentName, teacherName FROM teachers, students WHERE teachers.teacherId = students.tutor AND tutor = 1
console.log(
  query()
    .select(student)
    .from(teachers, students)
    .where(teacherJoin)
    .where(tutor1)
    .execute()
); // expected [{"studentName":"Michael","teacherName":"Peter"}]

function checkError(fn, duplicate) {
  try {
    fn();
    Test.expect(false, "An error should be throw");
  } catch (e) {
    Test.expect(e instanceof Error);
    Test.assertEquals(e.message, "Duplicate " + duplicate);
  }
}

function id(value) {
  return value;
}

// checkError
console.log(query().select().select().execute()); // expected "SELECT"
console.log(query().select().from([]).select().execute()); // expected "SELECT"
console.log(query().select().from([]).from([]).execute()); // expected "FROM"
console.log(query().select().from([]).orderBy(id).orderBy(id).execute()); // expected "ORDERBY"
console.log(query().select().groupBy(id).from([]).groupBy(id).execute()); // expected "ORDERBY"
