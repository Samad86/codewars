/* Задача:
Инструкции:
Учитывая математическое выражение в виде строки, вы должны вернуть результат в виде числа.

Числа:
Число может быть как целым числом, так и / или десятичным числом. То же самое касается возвращенного результата.

Операторы:
Вам необходимо поддерживать следующие математические операторы:
Умножение *
Деление / (как истинное деление)
Дополнение +
Вычитание -
Операторы всегда оцениваются слева направо, а * и / должны оцениваться до + и -.

Скобки:
Вам необходимо поддерживать несколько уровней вложенных скобок, напр. (2 / (2 + 3,33) * 4) - -6

Пробелы:
Между числами и операторами может быть или не быть пробела.

В дополнение к этому правилу знак минус (-), используемый для отрицания чисел и скобок, никогда не будет разделяться пробелами.

Т.е. все перечисленные ниже являются допустимыми выражениями:

1-1    // 0
1 -1   // 0
1- 1   // 0
1 - 1  // 0
1- -1  // 2
1 - -1 // 2

6 + -(4)   // 2
6 + -( -4) // 10

И следующие недопустимые выражения:

1 - - 1    // Неверно
1- - 1     // Неверно
6 + - (4)  // Неверно
6 + -(- 4) // Неверно

Проверка:
Вам не нужно беспокоиться о проверке - вы получите только действительные математические выражения, следуя приведенным выше правилам.

ПРИМЕЧАНИЕ. Функции eval и Function отключены. То же самое касается String.match.
*/

let calc = function (expression) {
  let terms = expression
    .match(/\d+\.\d+|\d+|[-+*\/(/)]/g)
    .map((t) => (isNaN(t) ? t : Number(t)));

  let peek = () => terms[0] || ""; // текущее значение
  let get = () => terms.shift(); // сдвигает указатель парсера на 1
  let accept = (...tokens) => tokens.includes(peek()); // является ли текущий токен допустимым или нет
  let calc = (tokens, f) => accept(tokens) && get() && f(); // вычисление выражения

  let isInt = (num) => Number(num) == num && num % 1 == 0;
  let isFloat = (num) => Number(num) == num && num % 1 != 0;

  let number = () => parseFloat(get());

  let factor = () => {
    if (isInt(peek()) || isFloat(peek())) return number();

    if (accept("(")) {
      get(); // ( если в выражении есть подвыражение в ()
      let result = expr();
      get(); // )
      return result;
    }

    if (accept("-")) {
      get(); // - (если в выражении есть отрицательное число)
      return -factor();
    }

    return 0; // если ошибка
  };

  let term = () => {
    let result = factor(); // результат - найденное число или найденное выражение в ()

    while (accept("*", "/")) {
      calc("*", () => (result *= factor()));
      calc("/", () => (result /= factor()));
    }

    return result;
  };

  let expr = () => {
    // вычисляет все выражение
    let result = term(); // результат - найденное число, найденное выражение в () и все * и /

    while (accept("+", "-")) {
      calc("+", () => (result += term()));
      calc("-", () => (result -= term()));
    }

    return result;
  };

  return expr();
};

console.log(calc("1+1")); // expected 2
console.log(calc("1 - 1")); // expected 0
console.log(calc("1* 1")); // expected 1
console.log(calc("1 /1")); // expected 1
console.log(calc("-123")); // expected -123
console.log(calc("123")); // expected 123
console.log(calc("2 /2+3 * 4.75- -6")); // expected 21.25
console.log(calc("12* 123")); // expected 1476
console.log(calc("2 / (2 + 3) * 4.33 - -6")); // expected 7.732
