/*
Задача:
Напишите метод, который берет в качестве аргумента поле для известной настольной игры «Морской бой» и возвращает значение «истина», если он имеет правильное расположение кораблей, в противном случае - значение «ложь». Аргумент гарантированно будет 10 * 10 двумерного массива. Элементами в массиве являются числа, 0, если ячейка свободна, и 1, если занят кораблем.

Морской бой - это игра-угадайка для двух игроков. Каждый игрок имеет сетку 10х10, содержащую несколько «кораблей», и цель состоит в том, чтобы уничтожить силы врага, нацеливая отдельные ячейки на его поле. Корабль занимает одну или несколько ячеек в сетке. Размер и количество кораблей могут отличаться от версии к версии. В этом ката мы будем использовать советскую / русскую версию игры.

Перед началом игры игроки устанавливают игровое поле и размещают корабли в соответствии со следующими правилами:
Должен быть один линкор (размер 4 ячейки), 2 крейсера (размер 3), 3 эсминца (размер 2) и 4 подводные лодки (размер 1). Любые дополнительные корабли не допускаются, равно как и пропущенные корабли.
Каждое судно должно быть прямой линией, кроме подводных лодок, которые представляют собой просто одну клетку.

Корабль не может перекрываться или находиться в контакте с любым другим судном ни по краю, ни по углу.
*/

// 1й способ:
// function validateBattlefield(field) {
//   let ships = {};
//   let len = 0; // длина каждого корабля
//   let direction;
//   let invalid = false; // проверка изменения направления => контакт с кораблем

//   function dfs(i, j, field, dir) {
//     if (
//       i < 0 ||
//       j < 0 ||
//       i >= field.length ||
//       j >= field[0].length ||
//       field[i][j] != "1"
//     )
//       return;

//     if (dir != direction) invalid = true;
//     len++;
//     field[i][j] = 2;

//     dfs(i - 1, j, field, "u");
//     dfs(i + 1, j, field, "d");
//     dfs(i, j - 1, field, "l");
//     dfs(i, j + 1, field, "r");
//     dfs(i - 1, j - 1, field, "ul"); // проверка контакта
//     dfs(i - 1, j + 1, field, "ur"); // проверка контакта
//     dfs(i + 1, j - 1, field, "dl"); // проверка контакта
//     dfs(i + 1, j + 1, field, "dr"); // проверка контакта
//   }

//   for (let i = 0; i < field.length; i++) {
//     for (let j = 0; j < field[0].length; j++) {
//       if (field[i][j] == 1) {
//         direction = field[i][j + 1] == 1 ? "r" : "d";
//         dfs(i, j, field, direction);
//         if (invalid == true) return false;
//       }
//       if (len > 0) {
//         if (!(len in ships)) ships[len] = 0;
//         ships[len] += 1;
//       }
//       len = 0;
//     }
//   }

//   for (let i = 1; i <= 4; i++) {
//     let k = i.toString();
//     if (!(k in ships) || ships[k] != 4 - i + 1) return false;
//     delete ships[k];
//   }

//   for (let k in ships) return false; // если есть еще корабль

//   return true;
// }

// 2й способ:
function validateBattlefield(field) {
  const hit = (row, col) =>
    row < 0 || col < 0 || row > 9 || col > 9 ? 0 : field[row][col];
  let ships = [10, 0, 0, 0, 0];

  for (let row = 0; row < 10; row++) {
    for (let col = 0; col < 10; col++) {
      if (hit(row, col)) {
        if (hit(row - 1, col - 1) || hit(row - 1, col + 1)) return false; // контакт кораблей по углу
        if (hit(row - 1, col) && hit(row, col - 1)) return false; // контакт кораблей по стороне
        if ((field[row][col] += hit(row - 1, col) + hit(row, col - 1)) > 4)
          return false;
        ships[field[row][col]]++;
        ships[field[row][col] - 1]--;
      }
    }
  }

  return [0, 4, 3, 2, 1].every((s, i) => s == ships[i]);
}

console.log(
  validateBattlefield([
    [1, 0, 0, 0, 0, 1, 1, 0, 0, 0],
    [1, 0, 1, 0, 0, 0, 0, 0, 1, 0],
    [1, 0, 1, 0, 1, 1, 1, 0, 1, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ])
); // expected true
console.log(
  validateBattlefield([
    [1, 0, 0, 0, 0, 1, 1, 0, 0, 0],
    [1, 0, 1, 0, 0, 0, 0, 0, 1, 0],
    [1, 0, 1, 0, 1, 1, 1, 0, 1, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ])
); // expected false
console.log(
  validateBattlefield([
    [1, 0, 0, 0, 0, 1, 1, 0, 0, 0],
    [1, 0, 1, 0, 0, 0, 0, 0, 1, 0],
    [1, 0, 1, 0, 1, 1, 1, 0, 1, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ])
); // expected false
console.log(
  validateBattlefield([
    [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 1, 0, 1, 1, 1, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ])
); // expected false
console.log(
  validateBattlefield([
    [1, 0, 0, 0, 0, 1, 1, 0, 0, 0],
    [1, 0, 1, 0, 0, 0, 0, 0, 1, 0],
    [1, 0, 1, 0, 1, 1, 1, 0, 1, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ])
); // expected false
console.log(
  validateBattlefield([
    [1, 0, 0, 0, 0, 1, 1, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [1, 1, 0, 0, 1, 1, 1, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ])
); // expected false
console.log(
  validateBattlefield([
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 1, 0, 0, 0, 0, 0, 1, 0],
    [1, 0, 1, 0, 1, 1, 1, 0, 1, 0],
    [1, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ])
); // expected false
