/* Задача:
Джон и Джо получили одинаковые оценки на школьном экзамене. Но они не хотят жить в мире, когда приравниваются друг к другу. Чтобы доказать свою мощь, Джон предлагает Джо написать программу, чтобы найти все возможные комбинации чисел, которые суммируются с данным числом. Не зная, сможет ли он совершить этот подвиг или нет, Джо принимает вызов. Будучи другом Джо, твоя задача - помочь ему.

Создайте комбо функции, которая принимает одно положительное целое число num (30 > num > 0) и возвращает массив массивов натуральных чисел, сумма которых равна num.

Примечание:
Подмассивы могут иметь или не иметь отсортированные элементы.
Порядок подмассивов внутри основного массива не имеет значения.
Для оптимального решения следующая операция должна быть завершена в течение 6000 мс.
Например:
    combos(3) => [[3], [1, 1, 1], [1, 2]]
    combos(10) => [[10],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [1, 1, 1, 1, 1, 1, 1, 1, 2],
      [1, 1, 1, 1, 1, 1, 1, 3],
      [1, 1, 1, 1, 1, 1, 4],
      [1, 1, 1, 1, 1, 5],
      [1, 1, 1, 1, 6],
      [1, 1, 1, 7],
      [1, 1, 8],
      [1, 9],
      [1, 1, 1, 1, 1, 1, 2, 2],
      [1, 1, 1, 1, 1, 2, 3],
      [1, 1, 1, 1, 2, 4],
      [1, 1, 1, 1, 2, 2, 2],
      [1, 1, 1, 1, 3, 3],
      [1, 1, 1, 2, 5],
      [1, 1, 1, 2, 2, 3],
      [1, 1, 1, 3, 4],
      [1, 1, 2, 6],
      [1, 1, 2, 2, 4],
      [1, 1, 2, 2, 2, 2],
      [1, 1, 2, 3, 3],
      [1, 1, 3, 5],
      [1, 1, 4, 4],
      [1, 2, 7],
      [1, 2, 2, 5],
      [1, 2, 2, 2, 3],
      [1, 2, 3, 4],
      [1, 3, 6],
      [1, 3, 3, 3],
      [1, 4, 5],
      [2, 8],
      [2, 2, 6],
      [2, 2, 2, 4],
      [2, 2, 2, 2, 2],
      [2, 2, 3, 3],
      [2, 3, 5],
      [2, 4, 4],
      [3, 7],
      [3, 3, 4],
      [4, 6],
      [5, 5]]
*/


// 1й способ:
// function combos(n) {
//   let cache = {};
//   if (n == 0) return [[]];
//   if (n == 1) return [[1]];
//   let res = [[n]];
//   let currentN = n - 1;
//   let sub = 0;
//   while (currentN >= 1) {
//     combos(currentN).forEach((arr) => {
//       sub = [n - currentN, ...arr].sort();
//       if (!cache[sub.toString()]) {
//         res.push(sub);
//         cache[sub.toString()] = true;
//       }
//     });
//     currentN--;
//   }
//   return res;
// }

// 2й способ:
// function combos(n) {
//   let arr = Array(n).fill(1);
//   let res = [[n]];
//   let i = 0;
//   let j = 1;
//   arr[0] = n;
//   while (arr[0] != 1) {
//     if (arr[i] == 2) {
//       arr[i]--;
//       i--;
//       j++;
//     } else {
//       let x = --arr[i];
//       let r = j - i;
//       while (r > x) {
//         arr[++i] = x;
//         r -= x;
//       }
//       j = i + 2;
//       if (r > 1) arr[++i] = r;
//     }
//     res.push(arr.slice(0, j));
//   }
//   return res;
// }

// 3й способ:
function combos(n, max = n) {
  if (max < 1) return [];
  if (n == 0) return [[]];
  if (max > n) max = n;
  return [
    ...combos(n, max - 1),
    ...combos(n - max, max).map((arr) => {
      arr.push(max);
      return arr;
    }),
  ];
}

console.log(combos(1)); // expected [[1]]
console.log(combos(2)); // expected [[2], [1, 1]
console.log(combos(3)); // expected [[3], [1, 1, 1], [1, 2]]
console.log(combos(4)); // expected [[4], [1, 1, 1, 1], [1, 1, 2], [1, 3], [2, 2]]
console.log(combos(5)); // expected [[5], [1, 1, 1, 1, 1], [1, 1, 1, 2], [1, 1, 3], [1, 2, 2], [1, 4], [2, 3]]
console.log(combos(6)); // expected [[6], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 2], [1, 1, 1, 3], [1, 1, 2, 2], [1, 1, 4], [1, 2, 3], [1, 5], [2, 2, 2], [2, 4], [3, 3]]
console.log(combos(8)); // expected [[8], [1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 4], [1, 1, 1, 2, 3], [1, 1, 1, 5], [1, 1, 2, 2, 2], [1, 1, 2, 4], [1, 1, 3, 3], [1, 1, 6], [1, 2, 2, 3], [1, 2, 5], [1, 3, 4], [1, 7], [2, 2, 2, 2], [2, 2, 4], [2, 3, 3], [2, 6], [3, 5], [4, 4]]
console.log(combos(10)); // expected [[10], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1, 3], [1, 1, 1, 1, 1, 1, 4], [1, 1, 1, 1, 1, 5], [1, 1, 1, 1, 6], [1, 1, 1, 7], [1, 1, 8], [1, 9], [1, 1, 1, 1, 1, 1, 2, 2], [1, 1, 1, 1, 1, 2, 3], [ 1, 1, 1, 1, 2, 4], [1, 1, 1, 1, 2, 2, 2], [1, 1, 1, 1, 3, 3], [1, 1, 1, 2, 5], [1, 1, 1, 2, 2, 3], [1, 1, 1, 3, 4], [1, 1, 2, 6], [1, 1, 2, 2, 4], [1, 1, 2, 2, 2, 2], [1, 1, 2, 3, 3], [1, 1, 3, 5], [1, 1, 4, 4], [1, 2, 7], [1, 2, 2, 5], [1, 2, 2, 2, 3], [1, 2, 3, 4], [1, 3, 6], [1, 3, 3, 3], [1, 4, 5], [2, 8], [2, 2, 6], [2, 2, 2, 4], [2, 2, 2, 2, 2], [2, 2, 3, 3], [2, 3, 5], [2, 4, 4], [3, 7], [3, 3, 4], [4, 6], [5, 5]]
