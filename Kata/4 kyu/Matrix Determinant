/*
Задача:
Напишите функцию, которая принимает квадратную матрицу (N x N 2D-массив) и возвращает определитель матрицы.

Как взять определитель матрицы - проще всего начать с самых маленьких случаев:

Матрица 1x1 |a| имеет определитель а.

Матрица 2x2 [[a, b], [c, d]] или

| а b |
| c d |
имеет определитель: a * d - b * c.

Определитель матрицы размера n x n вычисляется путем сведения задачи к вычислению определителей n матриц размера n-1 x n-1.

Для случая 3x3 [[a, b, c], [d, e, f], [g, h, i]] или

| a b c |
| d e f |
| g h i |
определитель: a * det(a_minor) - b * det(b_minor) + c * det(c_minor), где det(a_minor) относится к определению матрицы 2x2, созданной путем вычеркивания строки и столбца, в которых находится элемент А происходит:

| - - - |
| - е f |
| - h i |
Обратите внимание на чередование знаков.

Определитель больших матриц рассчитывается аналогично, например, если M - матрица 4x4 с первой строкой [a, b, c, d], то:

det(M) = a * det(a_minor) - b * det(b_minor) + c * det(c_minor) - d * det(d_minor)
*/

// 1й способ:
// function determinant(m) {
//   if (m.length == 1) return m[0][0];

//   function calc(matrix) {
//     if (matrix.length == 2)
//       return matrix[0][0] * matrix[1][1] - matrix[1][0] * matrix[0][1];

//     let res = 0;
//     let sign = 1;

//     for (let i = 0; i < matrix[0].length; i++) {
//       let temp = [];
//       for (let j = 1; j < matrix.length; j++) {
//         temp.push([]);
//         for (let k = 0; k < matrix[0].length; k++) {
//           if (k != i) temp[j - 1].push(matrix[j][k]);
//         }
//       }
//       res += matrix[0][i] * sign * calc(temp.slice());
//       sign *= -1;
//     }

//     return res;
//   }

//   return calc(m);
// }

// 2й способ:
function determinant(m) {
  if (m.length == 0) return 0;
  if (m.length == 1) return m[0][0];
  if (m.length == 2) return m[0][0] * m[1][1] - m[0][1] * m[1][0];
  if (m.length > 2) {
    return m.reduce((prev, curr, i, arr) => {
      let miniArr = arr
        .slice(0, i)
        .concat(arr.slice(i + 1))
        .map((item) => item.slice(1));
      return prev + (i % 2 == 0 ? 1 : -1) * curr[0] * determinant(miniArr);
    }, 0);
  }
}

console.log(determinant([[1]])); // expected 1
console.log(
  determinant([
    [1, 3],
    [2, 5],
  ])
); // expected -1
console.log(
  determinant([
    [2, 5, 3],
    [1, -2, -1],
    [1, 3, 4],
  ])
); // expected -20
console.log(
  determinant([
    [1, 2, 3, 4],
    [5, 0, 2, 8],
    [3, 5, 6, 7],
    [2, 5, 3, 1],
  ])
); // expected 24
console.log(
  determinant([
    [2, 5, 3, 6, 3],
    [17, 5, 7, 4, 2],
    [7, 8, 5, 3, 2],
    [9, 4, -6, 8, 3],
    [2, -5, 7, 4, 2],
  ])
); // expected 2060
console.log(
  determinant([
    [3, 2, 1, 4, 0, 1],
    [1, 2, 3, 1, 9, 1],
    [0, 2, 1, 1, 9, 0],
    [8, 2, 1, 0, 2, 3],
    [2, 3, 4, 0, 1, 2],
    [2, 1, 0, 0, 1, 1],
  ])
); // expected -536
