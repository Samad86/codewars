/* Задача:
Сортировка улиток:
Если задан массив n x n, вернуть элементы массива, расположенные от крайних элементов к среднему элементу, по часовой стрелке.

array = [[1,2,3],
        [4,5,6],
        [7,8,9]]
snail(array) => [1, 2, 3, 6, 9, 8, 7, 4, 5]
Для лучшего понимания, пожалуйста, последовательно следуйте номерам следующего массива:

array = [[1,2,3],
        [8,9,4],
        [7,6,5]]
snail(array) => [1, 2, 3, 4, 5, 6, 7, 8, 9]

ПРИМЕЧАНИЕ 1: Идея заключается не в сортировке элементов от минимального значения к максимальному; Идея состоит в том, чтобы пройти 2-мерный массив по часовой стрелке.

ПРИМЕЧАНИЕ 2: 0x0 (пустая матрица) представляется как пустой массив внутри массива [[]].
*/

// 1й способ:
// snail = function (array) {
//   let output = [];

//   let curLine = [];
//   let bottomLine = [];

//   for (let i = 0; i < Math.floor((array.length + 1) / 2); i++) {
//     curLine = array[i].slice(i, array.length - i);
//     bottomLine = array[array.length - i - 1]
//       .slice(i, array.length - i)
//       .reverse();

//     output = output.concat(curLine);

//     for (let j = i + 1; j < array.length - 1 - i; j++)
//       output.push(array[j][array.length - 1 - i]);

//     output =
//       i == array.length - 1 - i ? output.concat([]) : output.concat(bottomLine);

//     for (let k = array.length - 2 - i; k >= i + 1; k--)
//       output.push(array[k][i]);
//   }

//   return output;
// };

// 2й способ:
snail = function (array) {
  let output = [];

  while (array.length) {
    output = output ? output.concat(array.shift()) : array.shift();

    for (let i = 0; i < array.length; i++) output.push(array[i].pop());

    output = output.concat((array.pop() || []).reverse());

    for (let i = array.length - 1; i >= 0; i--) output.push(array[i].shift());
  }

  return output;
};

console.log(snail([[]])); // expected []
console.log(snail([[1]])); // expected [1]
console.log(
  snail([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9],
  ])
); // expected [1, 2, 3, 6, 9, 8, 7, 4, 5]
console.log(
  snail([
    [1, 2, 3, 4, 5],
    [6, 7, 8, 9, 10],
    [11, 12, 13, 14, 15],
    [16, 17, 18, 19, 20],
    [21, 22, 23, 24, 25],
  ])
); // expected [1, 2, 3, 4, 5, 10, 15, 20, 25, 24, 23, 22, 21, 16, 11, 6, 7, 8, 9, 14, 19, 18, 17, 12, 13]
console.log(
  snail([
    [1, 2, 3, 4, 5, 6],
    [20, 21, 22, 23, 24, 7],
    [19, 32, 33, 34, 25, 8],
    [18, 31, 36, 35, 26, 9],
    [17, 30, 29, 28, 27, 10],
    [16, 15, 14, 13, 12, 11],
  ])
); // expected [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]
