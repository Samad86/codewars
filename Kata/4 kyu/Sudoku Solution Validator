/* Задача:
Судоку - игра, в которую играют по сетке 9х9. Цель игры - заполнить все ячейки сетки цифрами от 1 до 9, чтобы каждый столбец, каждая строка и каждая из девяти подрешеток 3x3 (также известные как блоки) содержали все цифры от 1 до 9.

Напишите функцию validSolution(), которая принимает двумерный массив, представляющий доску судоку, и возвращает значение true, если это правильное решение, или значение false в противном случае. Ячейки доски судоку также могут содержать нули, которые будут представлять пустые ячейки. Доски, содержащие один или несколько нулей, считаются недействительными решениями.

Доска всегда 9 ячеек на 9 ячеек, и каждая ячейка содержит только целые числа от 0 до 9.

Примеры:

validSolution([
  [5, 3, 4, 6, 7, 8, 9, 1, 2],
  [6, 7, 2, 1, 9, 5, 3, 4, 8],
  [1, 9, 8, 3, 4, 2, 5, 6, 7],
  [8, 5, 9, 7, 6, 1, 4, 2, 3],
  [4, 2, 6, 8, 5, 3, 7, 9, 1],
  [7, 1, 3, 9, 2, 4, 8, 5, 6],
  [9, 6, 1, 5, 3, 7, 2, 8, 4],
  [2, 8, 7, 4, 1, 9, 6, 3, 5],
  [3, 4, 5, 2, 8, 6, 1, 7, 9]
]); // => true

validSolution([
  [5, 3, 4, 6, 7, 8, 9, 1, 2],
  [6, 7, 2, 1, 9, 0, 3, 4, 8],
  [1, 0, 0, 3, 4, 2, 5, 6, 0],
  [8, 5, 9, 7, 6, 1, 0, 2, 0],
  [4, 2, 6, 8, 5, 3, 7, 9, 1],
  [7, 1, 3, 9, 2, 4, 8, 5, 6],
  [9, 0, 1, 5, 3, 7, 2, 1, 4],
  [2, 8, 7, 4, 1, 9, 6, 3, 5],
  [3, 0, 0, 4, 8, 1, 1, 7, 9]
]); // => false
*/


// 1й способ:
// function validSolution(board) {
//   let blocks = [[], [], [], [], [], [], [], [], []];

//   for (let i = 0; i < board.length; i++) {
//     for (j = 0; j < board[i].length; j++) {
//       if (i >= 0 && i < 3 && j >= 0 && j < 3) blocks[0].push(board[i][j]);
//       if (i >= 0 && i < 3 && j >= 3 && j < 6) blocks[1].push(board[i][j]);
//       if (i >= 0 && i < 3 && j >= 6) blocks[2].push(board[i][j]);
//       if (i >= 3 && i < 6 && j >= 0 && j < 3) blocks[3].push(board[i][j]);
//       if (i >= 3 && i < 6 && j >= 3 && j < 6) blocks[4].push(board[i][j]);
//       if (i >= 3 && i < 6 && j >= 6) blocks[5].push(board[i][j]);
//       if (i >= 6 && j >= 0 && j < 3) blocks[6].push(board[i][j]);
//       if (i >= 6 && j >= 3 && j < 6) blocks[7].push(board[i][j]);
//       if (i >= 6 && j >= 6) blocks[8].push(board[i][j]);
//     }
//   }

//   if (!blocks.every((elem) => elem.reduce((acc, num) => acc + num, 0) == 45))
//     return false;

//   return true;
// }

// 2й способ:
function equals45(n) {
  return n == 45;
}

function validSolution(board) {
  var sumHor = [0, 0, 0, 0, 0, 0, 0, 0, 0];
  var sumVert = [0, 0, 0, 0, 0, 0, 0, 0, 0];
  let block = [
    [0, 0, 0],
    [0, 0, 0],
    [0, 0, 0],
  ];
  
  for (var i = 0; i < 9; i++) {
    for (var j = 0; j < 9; j++) {
      sumHor[i] += board[i][j];
      sumVert[j] += board[i][j];
      block[Math.floor(i / 3)][Math.floor(j / 3)] += board[i][j];
    }
  }
  
  for (var i = 0; i < 3; i++) if (!block[i].every(equals45)) return false;
  
  return sumHor.every(equals45) && sumVert.every(equals45);
}

console.log(
  validSolution([
    [5, 3, 4, 6, 7, 8, 9, 1, 2],
    [6, 7, 2, 1, 9, 5, 3, 4, 8],
    [1, 9, 8, 3, 4, 2, 5, 6, 7],
    [8, 5, 9, 7, 6, 1, 4, 2, 3],
    [4, 2, 6, 8, 5, 3, 7, 9, 1],
    [7, 1, 3, 9, 2, 4, 8, 5, 6],
    [9, 6, 1, 5, 3, 7, 2, 8, 4],
    [2, 8, 7, 4, 1, 9, 6, 3, 5],
    [3, 4, 5, 2, 8, 6, 1, 7, 9],
  ])
); // expected true
console.log(
  validSolution([
    [5, 3, 4, 6, 7, 8, 9, 1, 2],
    [6, 7, 2, 1, 9, 0, 3, 4, 8],
    [1, 0, 0, 3, 4, 2, 5, 6, 0],
    [8, 5, 9, 7, 6, 1, 0, 2, 0],
    [4, 2, 6, 8, 5, 3, 7, 9, 1],
    [7, 1, 3, 9, 2, 4, 8, 5, 6],
    [9, 0, 1, 5, 3, 7, 2, 1, 4],
    [2, 8, 7, 4, 1, 9, 6, 3, 5],
    [3, 0, 0, 4, 8, 1, 1, 7, 9],
  ])
); // expected false
console.log(
  validSolution([
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
  ])
); // expected false
console.log(
  validSolution([
    [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [2, 3, 1, 5, 6, 4, 8, 9, 7],
    [3, 1, 2, 6, 4, 5, 9, 7, 8],
    [4, 5, 6, 7, 8, 9, 1, 2, 3],
    [5, 6, 4, 8, 9, 7, 2, 3, 1],
    [6, 4, 5, 9, 7, 8, 3, 1, 2],
    [7, 8, 9, 1, 2, 3, 4, 5, 6],
    [8, 9, 7, 2, 3, 1, 5, 6, 4],
    [9, 7, 8, 3, 1, 2, 6, 4, 5],
  ])
); // expected false
console.log(
  validSolution([
    [1, 2, 6, 3, 4, 7, 5, 9, 8],
    [7, 3, 5, 8, 1, 9, 6, 4, 2],
    [1, 9, 4, 2, 7, 5, 8, 6, 3],
    [3, 1, 7, 5, 8, 4, 2, 6, 9],
    [7, 5, 9, 1, 6, 2, 4, 3, 8],
    [4, 8, 2, 9, 3, 6, 7, 1, 5],
    [1, 4, 8, 7, 5, 9, 3, 2, 6],
    [5, 6, 1, 4, 2, 3, 9, 8, 7],
    [2, 7, 3, 6, 9, 1, 8, 5, 4],
  ])
); // expected false
