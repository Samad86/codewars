/* Задача:
Однажды на пути через старый дикий гористый запад человеку было дано указание идти из одной точки в другую. Направления были "NORTH", "SOUTH", "WEST", "EAST". Очевидно, что "NORTH" и "SOUTH" противоположны, "WEST" и "EAST" тоже.

Идти в одном направлении и сразу же возвращаться в противоположном направлении - это ненужное усилие. Поскольку это дикий запад, с ужасной погодой и небольшим количеством воды, важно сэкономить немного энергии, иначе вы можете умереть от жажды!

Как я пересек горную пустыню разумным способом.
Например, человеку даны следующие указания:

["NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST"].

Вы можете сразу увидеть, что идти «NORTH» и сразу «SOUTH» не разумно, лучше оставаться на том же месте! Поэтому задача состоит в том, чтобы дать человеку упрощенную версию плана. Лучший план в этом случае просто: ["WEST"]

Другие примеры:
В [«NORTH», «SOUTH», «EAST», «WEST»] направление «NORTH» + «SOUTH» идет на север и сразу же возвращается.

Путь становится [«EAST», «WEST»], теперь «EAST» и «WEST» уничтожают друг друга, поэтому конечный результат - [].

В [«NORTH», «EAST», «WEST», «SOUTH», «WEST», «WEST»], «NORTH» и «SOUTH» не являются прямо противоположными, но они становятся прямо противоположными после сокращения «EAST» и "WEST", поэтому весь путь сводится к ["WEST", "WEST"].

Напишите функцию dirReduc, которая будет принимать массив строк и возвращает массив строк с удаленными ненужными направлениями (W <-> E или S <-> N рядом).

Примечание:
Не все пути могут быть упрощены. Путь ["NORTH", "WEST", "SOUTH", "EAST"] не сводится. «NORTH» и «WEST», «WEST» и «SOUTH», «SOUTH» и «EAST» не являются прямо противоположными друг другу напралениями и не могут стать таковыми. Следовательно, результат пути сам по себе: [«NORTH», «WEST», «SOUTH», «EAST»].
*/

function dirReduc(arr) {
  for (let i = arr.length - 1; i >= 0; i--) {
    if (
      (arr[i] === "NORTH" && arr[i + 1] === "SOUTH") ||
      (arr[i] === "SOUTH" && arr[i + 1] === "NORTH") ||
      (arr[i] === "EAST" && arr[i + 1] === "WEST") ||
      (arr[i] === "WEST" && arr[i + 1] === "EAST")
    )
      arr.splice(i, 2);
  }
  return arr;
}

console.log(
  dirReduc(["NORTH", "SOUTH", "SOUTH", "EAST", "WEST", "NORTH", "WEST"])
); // expected ["WEST"]
console.log(dirReduc(["NORTH", "WEST", "SOUTH", "EAST"])); // expected ["NORTH", "WEST", "SOUTH", "EAST"]
console.log(dirReduc(["NORTH", "SOUTH", "EAST", "WEST", "EAST", "WEST"])); // expected []
