/*
Учитывая список целых чисел и единственное значение суммы, верните первые два значения (пожалуйста, проанализируйте слева) в порядке появления, которые в сумме образуют сумму.

sum_pairs([11, 3, 7, 5],         10)
#              ^--^      3 + 7 = 10
== [3, 7]

sum_pairs([4, 3, 2, 3, 4],         6)
#          ^-----^         4 + 2 = 6, индексы: 0, 2 *
#             ^-----^      3 + 3 = 6, индексы: 1, 3
#                ^-----^   2 + 4 = 6, индексы: 2, 4
#  * вся пара раньше, поэтому правильный ответ
== [4, 2]

sum_pairs([0, 0, -2, 3], 2)
#  нет пар значений, которые можно было бы сложить для получения 2
== undefined

sum_pairs([10, 5, 2, 3, 7, 5],         10)
#              ^-----------^   5 + 5 = 10, индексы: 1, 5
#                    ^--^      3 + 7 = 10, индексы: 3, 4 *
#  * вся пара раньше, поэтому правильный ответ
== [3, 7]

Отрицательные числа и повторяющиеся числа могут появиться и появятся.

ПРИМЕЧАНИЕ. Также будут протестированы списки длиной более 10 000 000 элементов. Убедитесь, что время ожидания вашего кода не истекло.
*/

function sumPairs(ints, s) {
  let lst = new Set();

  for (let elem of ints) {
    if (lst.has(s - elem)) return [s - elem, elem];

    lst.add(elem);
  }
}

console.log(sumPairs([1, 4, 8, 7, 3, 15], 8)); // expected [1, 7]
console.log(sumPairs([1, -2, 3, 0, -6, 1], -6)); // expected [0, -6]
console.log(sumPairs([20, -13, 40], -7)); // expected undefined
console.log(sumPairs([1, 2, 3, 4, 1, 0], 2)); // expected [1, 1]
console.log(sumPairs([10, 5, 2, 3, 7, 5], 10)); // expected [3, 7]
console.log(sumPairs([4, -2, 3, 3, 4], 8)); // expected [4, 4]
console.log(sumPairs([0, 2, 0], 0)); // expected [0, 0]
console.log(sumPairs([5, 9, 13, -3], 10)); // expected [13, -3]
