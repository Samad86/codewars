/*
История:
Это довольно спокойная жизнь на ореховой ферме.
Большую часть времени мы просто сидим и смотрим на наши орехи.

Но раз в год приходит время сбора урожая ...
Сбор орехов очень прост. Мы просто качаем деревья, и орехи выпадают!

Когда они падают, орехи могут ударить по веткам:
Иногда они отскакивают налево.
Иногда они подпрыгивают прямо.
Иногда они застревают в дереве и совсем не падают.

Обозначения:
о = орех
\ = ветвь. Орех, попавший в эту ветку, отскакивает прямо
/ = ветвь. Орех, попавший в эту ветку, отскакивает влево
_ = ветвь. Орех, попавший в эту ветку, застревает в дереве
, = листья, которые не влияют на падающие орехи
| = ствол дерева, который не влияет на падающие орехи
= пустое пространство, которое не влияет на падающие орехи Kata Task

Встряхните дерево и сосчитайте, где приземляются орехи.

Выход - массив (такой же ширины, как дерево), который указывает, сколько орехов упало в каждой позиции ^

^ Смотрите пример тестов

Примечание:
Орехи всегда можно найти в верхней части дерева.
Орехи не влияют на структуру падения других орехов.
Там всегда достаточно места для орехов, чтобы упасть между ветвями.
На крайнем левом / правом краях древовидной матрицы нет ветвей, поэтому орех не может выпасть «за пределы».

Пример:

.o.oooooo.o.o.oooooo.
..\.\.../..\.../..\..
..../..\..../....../.
.....\...././.\..\.\.
...../../././...\....
.../.../..\./.\..\...
./.......\../.\../...
....\..../....././...
.../.\._.\../._../.\.
.\...././....\../.\..
./......././.../../..
         | |   
         | |  
         | |  
         | |   
         | |  
         | |  
101005000020000000040
*/

let shakeTree = function (tree) {
  let nuts = tree[0].map((nut) => (nut === "o" ? 1 : 0));
  
  for (let i = 1; i < tree.length; i++) {
    for (let j = 0; j < tree[i].length; j++) {
      if (tree[i][j] === `\\` && nuts[j] > 0) {
        nuts[j + 1] += nuts[j];
        nuts[j] = 0;
      }
      
      if (tree[i][j] === `/` && nuts[j] > 0) {
        nuts[j - 1] += nuts[j];
        nuts[j] = 0;
      }
      
      if (tree[i][j] === `_`) nuts[j] = 0;
    }
  }
  
  return nuts;
};

let tree = [
  " o o o  ",
  " /    / ",
  "   /    ",
  "  /  /  ",
  "   ||   ",
  "   ||   ",
  "   ||   ",
];
console.log(shakeTree(tree)); // expected [1, 1, 0, 0, 1, 0, 0, 0]

tree = [
  " o o o  ",
  " \\    \\ ",
  "   \\    ",
  "  \\  \\  ",
  "   ||   ",
  "   ||   ",
  "   ||   ",
];
console.log(shakeTree(tree)); // expected [0, 0, 0, 1, 1, 0, 1, 0]

tree = [
  " o o o  ", 
  " _      ", 
  "   _ _  ", 
  "   ||   ", 
  "   ||   ", 
  "   ||   "];
console.log(shakeTree(tree)); // expected  [0, 0, 0, 0, 0, 0, 0, 0]
