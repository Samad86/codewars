/* Задача:
Цель ката - попытаться показать, насколько сложно вычислить десятичное число иррационального числа с определенной точностью. Мы решили получить несколько десятичных знаков числа «пи», используя следующие бесконечные ряды (Лейбниц 1646–1716):

PI/4 = 1 - 1/3 + 1/5 - 1/7 + ... что дает приближение PI/4.

Чтобы измерить степень сложности, мы посчитаем, сколько итераций необходимо для расчета PI с заданной точностью.

Существует несколько способов определения точности исчисления, но для простоты мы рассчитаем с точностью до epsilon вашего константы Math::PI. Другими словами, мы остановим итеративный процесс, когда абсолютное значение разницы между нашими вычислениями и константой Math::PI будет меньше, чем epsilon.

Ваша функция возвращает массив, где ваше приближение PI имеет 10 десятичных знаков.

Пример:

Ваша функция вычисляет 1000 итераций и 3.140592653839794, но возвращает:
iterPi(0.001) --> [1000, 3.1405926538]
К сожалению, этот ряд сходится слишком медленно, чтобы быть полезным, поскольку для получения точности с точностью до 2 десятичных знаков требуется более 300 членов. Чтобы получить 100 десятичных знаков PI, было подсчитано, что нужно будет использовать не менее 10^50 членов этого расширения!
*/

// 1й способ:
// function iterPi(epsilon) {
//   let num = 1;
//   let pi = 4;
//   let factor = -4;

//   while (Math.abs(Math.PI - pi) > epsilon) {
//     pi += factor / (num * 2 + 1);
//     num++;
//     factor = -factor;
//   }

//   return [num, Number(pi.toFixed(10))];
// }


// 2й способ:
function iterPi(epsilon) {
  let pi = 0;
  let iterations = 0;
  let factor = 1;
  let divider = 1;

  while (Math.abs(Math.PI - pi * 4) >= epsilon) {
    pi += factor / divider;
    factor = -factor;
    divider += 2;
    iterations++;
  }

  return [iterations, Number(pi * 4).toFixed(10)];
}

console.log(iterPi(0.1)); // expected [10, 3.0418396189]
console.log(iterPi(0.01)); // expected [100, 3.1315929036]
